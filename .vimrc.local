set cursorline " highlight current line
let test#strategy = "vimux"

" Mappings for vim-test
nmap <leader>tn :TestNearest<CR>
nmap <leader>tf :TestFile<CR>
nmap <leader>ts :TestSuite<CR>
nmap <leader>tl :TestLast<CR>
nmap <leader>tv :TestVisit<CR>

let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

" highlight search
set hlsearch
  nmap <leader>hl :let @/ = ""<CR>

" gui settings
if (&t_Co == 256 || has('gui_running'))
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme gruvbox
  else
    colorscheme desert
  endif
endif

" Set airline theme 
let g:airline_theme='base16_monokai'
" disable tmuxline extension so we configure it manually after
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#branch#format = 1
let g:airline_powerline_fonts = 1
let g:airline_section_z = '%t'
let g:airline_section_c = ''

nmap <c-s> :update<CR>
vmap <c-s> <Esc><c-s>gv
imap <c-s> <Esc><c-s>

noremap! jj <ESC>

" Remove conflicting mappings with Align plugin (:verbose :map <leader>s)
silent! autocmd VimEnter * unmap <leader>swp
silent! autocmd VimEnter * unmap <leader>rwp

set autowrite
set nowritebackup
set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines

autocmd! bufwritepost .vimrc source ~/.vimrc

" This allows to switch tmux windows vertically from NerdTree
" Bug documented here: https://github.com/christoomey/vim-tmux-navigator/issues/83
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'

" Config win size
let g:NERDTreeWinSize=33
autocmd vimenter * if !argc() | NERDTree | endif

" Vimux Configuration
map <Leader>vq :VimuxCloseRunner<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vp :VimuxPromptCommand<CR>
map <Leader>vx :VimuxInterruptRunner<CR>

" Enable GitGutter by default
let g:gitgutter_enabled = 1

" Ctrl-p config
let g:ctrlp_by_filename = 1
" Only use MRU in current working dir
let g:ctrlp_mruf_relative = 1
" CtrlP split vertical panes on the right
set splitright
" Use MRU + Files by default
let g:ctrlp_cmd = 'CtrlPMRUFiles'

" Mappings for TagBar plugin
let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
        \ 'p:protocols',
        \ 'm:modules',
        \ 'e:exceptions',
        \ 'y:types',
        \ 'd:delegates',
        \ 'f:functions',
        \ 'c:callbacks',
        \ 'a:macros',
        \ 't:tests',
        \ 'i:implementations',
        \ 'o:operators',
        \ 'r:records'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 'p' : 'protocol',
        \ 'm' : 'module'
    \ },
    \ 'scope2kind' : {
        \ 'protocol' : 'p',
        \ 'module' : 'm'
    \ },
    \ 'sort' : 0
\ }

" persistent vim history on disk
" " Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" Let NerdTree show hiden files
let NERDTreeShowHidden=1
