" Neovim config to display command in a split window
if has('nvim')
    set inccommand=split
endif

set cursorline " highlight current line
let test#strategy = "dispatch"
" let test#filename_modifier = ":p"

" Fix issue with tmuxnavigator and tmp files
" https://github.com/christoomey/vim-tmux-navigator/issues/105
let $TMPDIR = $HOME."/tmp"

" Mappings for vim-test
nmap <leader>tn :TestNearest<CR>
nmap <leader>tf :TestFile<CR>
nmap <leader>ts :TestSuite<CR>
nmap <leader>tl :TestLast<CR>
nmap <leader>tv :TestVisit<CR>

" Vim format mappings
let g:mix_format_on_save = 1
let g:mix_format_silent_errors = 1

" highlight search
set hlsearch
" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Fast saving
nmap <leader>w :w!<cr>

set autowrite
set nowritebackup
set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines

" This allows to switch tmux windows vertically from NerdTree
" Bug documented here: https://github.com/christoomey/vim-tmux-navigator/issues/83
let g:NERDTreeMapJumpNextSibling = '<Nop>'
let g:NERDTreeMapJumpPrevSibling = '<Nop>'
" Let NerdTree show hiden files
let NERDTreeShowHidden=1
" Config win size
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeMinimalUI = 1

" open nerd tree on open
autocmd vimenter * if !argc() | NERDTree | endif

" FZF {{{
" exclude .gitignore files plus .git folder and add hidden files
let $FZF_DEFAULT_COMMAND = 'rg --hidden -g "!.git" -l ""'
" show results in bottom layout
let g:fzf_layout = { 'down': '~40%' }
" enable history, so we can use ctrl-p and ctrl-n to see them
let g:fzf_history_dir = '~/.local/share/fzf-history'

" mappings
nnoremap <silent> <C-p> :FZF -m<CR>
nnoremap <silent> <Leader>b :Buffers<CR>
nnoremap <silent> <Leader>` :Marks<CR>
" FZF }}}

" TagBar: Mappings plugin
let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
        \ 'p:protocols',
        \ 'm:modules',
        \ 'e:exceptions',
        \ 'y:types',
        \ 'd:delegates',
        \ 'f:functions',
        \ 'c:callbacks',
        \ 'a:macros',
        \ 't:tests',
        \ 'i:implementations',
        \ 'o:operators',
        \ 'r:records'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 'p' : 'protocol',
        \ 'm' : 'module'
    \ },
    \ 'scope2kind' : {
        \ 'protocol' : 'p',
        \ 'module' : 'm'
    \ },
    \ 'sort' : 0
\ }

" persistent vim history on disk
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" ----Autocompletion--------
"
" don't automatically show dictionary words for autocompletion " trigger with ctrlp
set complete+=kspell
set completeopt=menuone,longest " configure dictionary in english
set spelllang=en_us
set nospell

" Don't update status bar in autocompletion
set shortmess+=c

" Toggle spell check.
map <F6> :setlocal spell!<CR>

" Autocompletion window: Navigate the complete menu items like CTRL+n / CTRL+p would.
inoremap <expr> <Down> pumvisible() ? "<C-n>" :"<Down>"
inoremap <expr> <Up> pumvisible() ? "<C-p>" : "<Up>"

" Select the complete menu item like CTRL+y would.
inoremap <expr> <Right> pumvisible() ? "<C-y>" : "<Right>"
inoremap <expr> <Tab> pumvisible() ? "<C-y>" : "<Tab>"

" Cancel the complete menu item like CTRL+e would.
inoremap <expr> <Left> pumvisible() ? "<C-e>" : "<Left>"

" -----------------------

" Quickfix window {{{
function! ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

nnoremap <silent> <leader>c :call ToggleQuickFix()<cr>

" Update a buffer's contents on focus if it changed outside of Vim.
au FocusGained,BufEnter * :checktime

" Toggle paste mode
set pastetoggle=<F5>
" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Press * to search for the term under the cursor or a visual selection and
" then press the key below to replace all instances of it in the current file.
nnoremap <Leader>r :%s///g<Left><Left>
nnoremap <Leader>rc :%s///gc<Left><Left><Left>

" The same as above but insteu of acting on the whole file it will be
" restricted to the previously visually selected range. You can do that by
" pressing *, visually selecting the range you want it to apply to and then
" press the key below to replace all instances of it in the current selection.
" (https://github.com/nickjj/dotfiles/blob/master/.)
xnoremap <Leader>r :s///g<Left><Left>
xnoremap <Leader>rc :s///gc<Left><Left><Left>

" Type a replacement term and press . to repeat the replacement again. Useful
" for replacing a few instances of the term (comparable to multiple cursors).
nnoremap <silent> s* :let @/='\<'.expand('<cword>').'\>'<CR>cgn
xnoremap <silent> s* "sy:let @/=@s<CR>cgn

" Swap begin of line keys for easy acces
noremap 0 ^
noremap ^ 0

" vim split on the right always
set splitright

" format/indent whole file keeping cursor at the same position
noremap =a gg=G<C-o><C-o>

" Keep cursor at the bottom of the visual selection after you yank it.
vmap y ygv<Esc>

" Prevent x from overriding what's in the clipboard.
noremap x "_x
noremap X "_x

" -----------------------------------------------------------------------------
" Color settings
" -----------------------------------------------------------------------------
"
" Instead of syntax on, use This
" to avoid problems with devicons
" https://github.com/ryanoasis/vim-devicons/issues/215#issuecomment-377782464
if !exists('g:syntax_on')
  syntax enable
endif


" Enable 24-bit true colors if your terminal supports it.
if (has("termguicolors"))
  " https://github.com/vim/vim/issues/993#issuecomment-255651605
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  set termguicolors
endif

" Set the color scheme to dark.
set background=dark

colorscheme one

" Trigger a highlight in the appropriate direction when pressing these keys.
let g:qs_highlight_on_keys=['f', 'F', 't', 'T']

highlight QuickScopePrimary gui=underline cterm=underline
highlight QuickScopeSecondary gui=underline cterm=underline

augroup qs_colors
  autocmd!
  autocmd ColorScheme * highlight QuickScopePrimary gui=underline cterm=underline
  autocmd ColorScheme * highlight QuickScopeSecondary gui=underline cterm=underline
augroup END

" Remove background color for panels vertical split separator
hi VertSplit ctermbg=NONE guibg=NONE

" Update highlight color
hi CurrentWordTwins ctermbg=NONE ctermfg=NONE guibg=#3E4552 guifg=NONE cterm=NONE gui=NONE
hi CurrentWord ctermbg=NONE ctermfg=NONE guibg=#3E4552 guifg=NONE cterm=NONE gui=NONE
" Update Visual color
hi Visual guifg=NONE guibg=#596277 gui=NONE

" Toggle CurrentWord
let vim_current_word#enabled = 0
map <leader>. :ToggleCurrentWord<CR>
command! ToggleCurrentWord call ToggleCurrentWord()

function ToggleCurrentWord()
  if g:vim_current_word#enabled == 1
    call vim_current_word#vim_current_word_disable()
  else
    call vim_current_word#vim_current_word_enable()
    call vim_current_word#highlight_word_under_cursor()
  endif
endfunction

" airline {{{ "
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'tomorrow'
" disable tmuxline extension so we configure it manually after
let g:airline#extensions#tmuxline#enabled = 0
" show only the tail of the branch name
let g:airline#extensions#branch#format = 1
" Don't show icon for dirty repository
let g:airline#extensions#branch#vcs_checks = ['untracked']
" Don't show git changes to current file in airline
let g:airline#extensions#hunks#enabled=0
let g:airline_right_sep=''
let g:airline_left_sep=''
" Show filename only instead of file path
let g:airline_section_c = '%t'
" Show filetype only, without function name
let g:airline_section_x='%{airline#util#wrap(airline#parts#filetype(),0)}'
" Hack to avoid lagginess when switching between panes
" https://github.com/vim-airline/vim-airline/issues/1026#issuecomment-322134816
let g:airline_highlighting_cache=1
" }}} airline "

" Open tag under cursor in vsplit
noremap <C-W>] :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" arrow keys resize windows
nnoremap <Left> :vertical resize -10<CR>
nnoremap <Right> :vertical resize +10<CR>
nnoremap <Up> :resize -10<CR>
nnoremap <Down> :resize +10<CR>

" Vim-Dispatch
" Disable tmux handler so it defaults to Job one, which uses quicklist instead
" of tmux pane to run tests
let g:dispatch_no_tmux_make = 1

" Fugitive {{{
let g:fugitive_gitlab_domains = ['https://gitlab.otters.xyz']
nmap <silent> <leader>-  :Gstatus<cr><c-n>
nnoremap <leader>gp :Gpull<cr>
nnoremap <silent> <leader>gb :Gblame<cr>
nnoremap <silent> <leader>gd :Gvdiff<cr>
nnoremap <silent> <leader>go :Gbrowse<cr>
xnoremap <silent> <leader>go :Gbrowse<cr>
nnoremap <silent> <leader>gl :0Glog<cr>
" }}} fugitive

" Git {{{ "
command! -nargs=0 Gmrl !lab mr -l
command! -nargs=* Gmr !lab mr -b <q-args>

nnoremap <silent> <leader>gmr :Gmr<cr>
nnoremap <leader>gmrl :Gmrl<cr>
" Git }}} "
"
" Open def in vertical/horizontal split
:nnoremap <leader>v <C-w>v
"
" vim-go {{{ "
" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

au FileType go nmap <silent> <leader>r <Plug>(go-run)
au FileType go nmap <silent> <leader>e <Plug>(go-install)
au FileType go nmap <silent> <Leader>i <Plug>(go-info)
au FileType go nmap <silent> <Leader>v <Plug>(go-def-vertical)
au FileType go nmap <silent> <Leader>s <Plug>(go-def-split)
au FileType go nmap <silent> <Leader>x <Plug>(go-doc-vertical)
au FileType go nmap <silent> <Leader>tc <Plug>(go-coverage-toggle)
au FileType go nmap <silent> <Leader>L <Plug>(go-metalinter)
au FileType go nmap <silent> <leader>B :<C-u>call <SID>build_go_files()<CR>
" Find and open respective test go file
au FileType go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
au FileType go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
au FileType go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
au FileType go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" use terminal buffer for console in neovim
let g:go_term_enabled = 1
let g:go_term_mode = "vsplit"

" Add go special tab identitation
autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4

let g:go_highlight_structs = 1
let g:go_highlight_methods = 1
let g:go_highlight_functions = 1
let g:go_highlight_functions = 1
let g:go_highlight_types = 1
" vim-go }}} "

" Make Rg not list the actual filenames
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   "rg --column --line-number --no-heading --color=always --smart-case --hidden -g '!.git' ".shellescape(<q-args>),
      \   1,
      \   fzf#vim#with_preview({ 'options': '--delimiter : --nth 4..' }, 'right:50%:hidden', 'ç'),
      \   <bang>0
      \ )

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Close the current buffer
map <leader>Bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>Ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <C-space> ?

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
cno $c e <C-\>eCurrentFileDir("e")<cr>

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ale (syntax checker and linter)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <silent> <leader>n <Plug>(ale_next_wrap)

" Disabling highlighting
let g:ale_set_highlights = 0

" Only run linting when saving the file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
