" Neovim config to display command in a split window
"
if has('nvim')
    set inccommand=split
endif

set shell=/bin/bash

set cursorline " highlight current line
let test#strategy = "dispatch"

" Fix issue with tmuxnavigator and tmp files
" https://github.com/christoomey/vim-tmux-navigator/issues/105
let $TMPDIR = $HOME."/tmp"

" Mappings for vim-test
nmap <leader>tn :TestNearest<CR>
nmap <leader>tf :TestFile<CR>
nmap <leader>ts :TestSuite<CR>
nmap <leader>tl :TestLast<CR>
nmap <leader>tv :TestVisit<CR>

" Move selected lines around
vnoremap J :m '>+1<cr>gv=gv
vnoremap K :m '<-2<cr>gv=gv

" Vim format mappings
let g:mix_format_on_save = 0
let g:mix_format_silent_errors = 1

" Remove search highlight
nnoremap <leader>. :nohlsearch<CR>

" Fast saving
nnoremap <leader>w :w!<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when moving up and down
noremap <C-d> <C-d>zz
noremap <C-u> <C-u>zz

" Remap H and L (top, bottom of screen to left and right end of line)
nnoremap H ^
nnoremap L $
vnoremap H ^
vnoremap L g_

" Act like D and C
nnoremap Y y$

" Don't move on * I'd use a function for this but Vim clobbers the last search
" when you're in a function so fuck it, practicality beats purity.
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*:call winrestview(stay_star_view)<cr>

" mimic the behavior of /%Vfoobar which searches within the previously
" selected visual selection
" while in search mode, pressing / will do this
vnoremap / <Esc>/\%><C-R>=line("'<")-1<CR>l\%<<C-R>=line("'>")+1<CR>l
vnoremap ? <Esc>?\%><C-R>=line("'<")-1<CR>l\%<<C-R>=line("'>")+1<CR>l

set autowrite
set nowritebackup
set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines

" FZF {{{
" exclude .gitignore files plus .git folder and add hidden files
let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
let $FZF_DEFAULT_OPTS = '--bind ctrl-a:select-all'

" enable history, so we can use ctrl-p and ctrl-n to see them
let g:fzf_history_dir = '~/.local/share/fzf-history'

" mappings
nmap <C-g> :lua require'telescope.builtin'.lsp_document_symbols{}<cr>
nnoremap <silent> <C-p> :lua require'telescope.builtin'.find_files({hidden=true})<cr>
nnoremap <silent> <Leader><space> :lua require'telescope.builtin'.buffers({sort_mru=true})<cr>
nnoremap <silent> <Leader>h :lua require'telescope.builtin'.oldfiles({only_cwd=true})<cr>
nnoremap <silent> <Leader>L :lua require'telescope.builtin'.live_grep{}<cr>
inoremap <c-l> <c-\><c-o>:Snippets<cr>

" seach word under cursor
nnoremap <silent> <leader>sw :lua require'telescope.builtin'.grep_string{}<cr>
"
" Search with The Silver Searcher Ag
nnoremap <leader>a :Rg<space>
xnoremap <silent> <leader>a y:Rg <C-R>"<cr>

" paste from 0 register (help when unnamed " has been unintentionally replaced)
noremap <Leader>p "0p
vnoremap <Leader>p "0p

" TagBar: Adapt for elixir
let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
        \ 'p:protocols',
        \ 'm:modules',
        \ 'e:exceptions',
        \ 'y:types',
        \ 'd:delegates',
        \ 'f:functions',
        \ 'c:callbacks',
        \ 'a:macros',
        \ 't:tests',
        \ 'i:implementations',
        \ 'o:operators',
        \ 'r:records'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 'p' : 'protocol',
        \ 'm' : 'module'
    \ },
    \ 'scope2kind' : {
        \ 'protocol' : 'p',
        \ 'module' : 'm'
    \ },
    \ 'sort' : 0
\ }

set shortmess+=c   " Shut off completion messages
set belloff+=ctrlg " If Vim beeps during completion

" increase max memory to show syntax highlighting for large files 
set maxmempattern=20000

" persistent vim history on disk
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.vim'
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocompletion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" don't automatically show dictionary words for autocompletion " trigger with ctrlp
set complete+=kspell
set completeopt=menuone,longest "configure dictionary in english
set spelllang=en_us
set nospell
" Don't update status bar in autocompletion
set shortmess+=c
" Toggle spell check.
map <F6> :setlocal spell!<CR>

" Quickfix window {{{
function! ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

nnoremap <silent> <leader>q :call ToggleQuickFix()<cr>

" Quickfix window open in split vertical window with 's'
autocmd! FileType qf nnoremap <buffer> s <C-w><Enter><C-w>L

" Print full path
map <C-f> :echo expand("%:p")<cr>
" Copy current file path to clipboard
nnoremap <silent> <C-c> :let @* = expand("%:h")<cr>

" Toggle paste mode
set pastetoggle=<F5>
" Unset paste on InsertLeave.
autocmd InsertLeave * silent! set nopaste

" Swap begin of line keys for easy acces
noremap 0 ^
noremap ^ 0

" vim split on the right always
set splitright

" format/indent whole file keeping cursor at the same position
noremap =a gg=G<C-o><C-o>

" Keep cursor at the bottom of the visual selection after you yank it.
vmap y ygv<Esc>

" Prevent x from overriding what's in the clipboard.
noremap x "_x
noremap X "_x

" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
" Uses register * (mac clipboard) for everything
set clipboard^=unnamed
set clipboard^=unnamedplus

" -----------------------------------------------------------------------------
" Color settings
" -----------------------------------------------------------------------------
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'tokyonight',
      \ 'active': {
      \   'left': [ ['mode', 'paste'], ['fugitive', 'relativepath'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'component': {
      \   'fugitive': '%{exists("*FugitiveHead")?FugitiveHead():""}'
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }

let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_infos': 'lightline#ale#infos',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors': 'lightline#ale#errors',
      \  'linter_ok': 'lightline#ale#ok',
      \ }

let g:lightline.component_type = {
      \     'linter_checking': 'right',
      \     'linter_infos': 'right',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'right', 
      \ }

let g:lightline.active = {    
      \   'left': [ ['mode', 'paste'], ['fugitive', 'relativepath', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'], [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok' ]] 
      \ }

"
" Instead of syntax on, use This
" to avoid problems with devicons
" https://github.com/ryanoasis/vim-devicons/issues/215#issuecomment-377782464
if !exists('g:syntax_on')
  syntax enable
endif

" Enable 24-bit true colors if your terminal supports it.
if (has("termguicolors"))
  " https://github.com/vim/vim/issues/993#issuecomment-255651605
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  set termguicolors
endif

let g:tokyonight_style = "storm"
colorscheme tokyonight 
set background=dark


" Remove background color for panels vertical split separator
hi VertSplit ctermbg=NONE guibg=NONE

" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" QuickScope
" Trigger a highlight in the appropriate direction when pressing these keys.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:qs_highlight_on_keys=['f', 'F', 't', 'T']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" delimitMate config for auto close quotes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:delimitMate_expand_cr = 1   
let g:delimitMate_expand_space = 1    
let g:delimitMate_smart_quotes = 1    
let g:delimitMate_expand_inside_quotes = 0    
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'   

" make nvim work with python and ruby
let g:python3_host_prog='/usr/bin/python3'
let g:ruby_host_prog='/Users/pablo.alcalde/.asdf/shims/ruby'

" arrow keys resize windows
nnoremap <Left> :vertical resize -10<CR>
nnoremap <Right> :vertical resize +10<CR>
nnoremap <Up> :resize -10<CR>
nnoremap <Down> :resize +10<CR>
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Visual Multi
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:VM_maps = {}
let g:VM_maps["Add Cursor Down"]    = ',j'
let g:VM_maps["Add Cursor Up"]      = ',k'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Fugitive
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:fugitive_gitlab_domains = ['https://gitlab.otters.xyz', 'https://gitlab.com']
nnoremap <silent> <leader>- :Git<cr>
nnoremap <leader>gp :Gpull<cr>
nnoremap <silent> <leader>gb :Git blame<cr>
nnoremap <silent> <leader>gd :Gvdiff<cr>
nnoremap <silent> <leader>go :GBrowse!<cr>
xnoremap <silent> <leader>go :GBrowse!<cr>
nnoremap <silent> <leader>gO :GBrowse<cr>
xnoremap <silent> <leader>gO :GBrowse<cr>
nnoremap <silent> <leader>gl :Gclog<cr>
" }}} fugitive

" Run commands in ex mode and put result in quickfix
command -nargs=+ Run :cexpr system('<args>') | copen
"
" Open def in vertical/horizontal split
" nnoremap <leader>v <C-w>v
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-go 
" run :GoBuild or :GoTestCompile based on the go file
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

let g:go_test_timeout = '3600s'
" Disable <C-]> mapping, I use nvim LSP
let g:go_def_mapping_enabled = 0

" create a go doc comment based on the word under the cursor
function! s:create_go_doc_comment()
  norm "zyiw
  execute ":put! z"
  execute ":norm I// \<Esc>$"
endfunction
nnoremap <leader>ui :<C-u>call <SID>create_go_doc_comment()<CR>

augroup go
autocmd!
au FileType go nmap <silent> <leader>b :<C-u>call <SID>build_go_files()<CR>
" Alternate between test and implementation file
au FileType go nmap <silent> <leader>ta :A<CR>
au FileType go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
au FileType go nmap <silent> <leader>v <Plug>(go-def-vertical)
augroup END

" Indent-guides disable mappings
let g:indent_guides_default_mapping = 0

" Open help in vsplit (taken from junnegun)
augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

" Add go special tab identitation
augroup filetypedetect
  autocmd BufNewFile,BufRead .tmux.conf*,tmux.conf* setf tmux
  autocmd BufNewFile,BufRead .nginx.conf*,nginx.conf* setf nginx
  autocmd BufNewFile,BufRead *.hcl setf conf

  autocmd BufRead,BufNewFile *.gotmpl set filetype=gotexttmpl

  autocmd BufNewFile,BufRead *.ino setlocal noet ts=4 sw=4 sts=4
  autocmd BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
  autocmd BufNewFile,BufRead *.md setlocal noet ts=4 sw=4
  autocmd BufNewFile,BufRead *.html setlocal noet ts=4 sw=4
  autocmd BufNewFile,BufRead *.vim setlocal expandtab shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead *.hcl setlocal expandtab shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead *.sh setlocal expandtab shiftwidth=2 tabstop=2
  autocmd BufNewFile,BufRead *.proto setlocal expandtab shiftwidth=2 tabstop=2

  autocmd FileType go setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType lua setlocal noexpandtab tabstop=4 shiftwidth=4
  autocmd FileType yaml setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType json setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
augroup END

" use terminal buffer for console in neovim
let g:go_term_enabled = 1
let g:go_term_mode = "split above"

let g:go_fmt_fail_silently = 1
let g:go_debug_windows = {
      \ 'vars':  'leftabove 35vnew',
      \ 'stack': 'botright 10new',
\ }

let g:go_fmt_command = "goimports"
let g:go_imports_autosave = 0 " we are using ale fixers instead
let g:go_fmt_autosave = 0

let g:go_test_prepend_name = 1
let g:go_list_type = "locationlist"
let g:go_term_close_on_exit = 1
let g:go_auto_type_info = 0
let g:go_auto_sameids = 0

let g:go_null_module_warning = 0
let g:go_echo_command_info = 1

let g:go_autodetect_gopath = 0
let g:go_gopls_enabled = 0

let g:go_info_mode = 'gopls'
let g:go_rename_command='gopls'
let g:go_gopls_complete_unimported = 1
let g:go_implements_mode='gopls'
let g:go_diagnostics_enabled = 1
let g:go_doc_popup_window = 1
let g:go_diagnostics_level = 0

let g:go_modifytags_transform = 'camelcase'
let g:go_fold_enable = []

let g:go_test_show_name = 1

" VIM-DELVE
let g:delve_use_vimux = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FZF
" Allow to pass commands to RG
" Search by default hidden files except .git folder
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \ "rg --column --line-number --no-heading --hidden --smart-case " .
      \ shellescape(<q-args>), 1, fzf#vim#with_preview({'options': '--color=bg:#272B33,fg:#272B33,bg+:#272B33,preview-bg:#454545'}), <bang>0)

" Use fzf Snippets to search through description not only name
command! -bar -bang Snippets call fzf#vim#snippets({'options': '--tiebreak=begin -n ..'}, <bang>0)

" ~/.viminfo needs to be writable and readable. Set oldfiles to 1000 last
" recently opened files, :FzfHistory uses it
set viminfo='1000

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
if !has('gui_running')
  set notimeout
  set ttimeout
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif

" " Empty value to disable preview window altogether
" let g:fzf_preview_window = ''

" Customize fzf colors to match your color scheme.
let g:fzf_colors =
      \ { 'fg':    ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Return to last edit position when opening files (You want this!)
" exclude files inside .git folder
autocmd BufReadPost *
    \ if expand('%:p') !~# '.git/' && line("'\"") > 0 && line("'\"") <= line("$") |
    \     exe "normal! g`\"" |
    \ endif

" Close the current buffer
map <leader>Bd :Bclose<cr>:tabclose<cr>gT

" Super useful when editing files in the same directory
map <leader>te :tabedit <C-r>=expand("%:p:h")<cr>/

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cno $c e <C-\>eCurrentFileDir("e")<cr>

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>
cnoremap <C-K> <C-U>

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc

" we don't put gopls here as linter cause nvim already comes with one
" integrated that shows diagnostic errors as well
let g:ale_linters = { 'go': ['golangci-lint'], 'proto': ['protolint'], 'ruby': ['rubocop'] }
let g:ale_fixers = { 'proto': ['protolint'], 'go': ['goimports'] }
let g:ale_fix_on_save = 1
let g:ale_proto_protolint_config = "/Users/pablo.alcalde/.protolint.yml"
let g:ale_go_golangci_lint_package = 1
let g:ale_go_golangci_lint_options = '-e composites -E stylecheck -E goimports -E revive -E govet -E rowserrcheck -E gocognit -E exhaustive'
let g:ale_enabled = 1
let g:ale_sign_info = ""
let g:ale_sign_error = ""
let g:ale_sign_warning = ""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YouCompleteME (autocompletion and and linter)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" disable all diagnostics so doesn't interfere with ALE
let g:ycm_show_diagnostics_ui = 0

" disable perl to avoid issue in nvim :checkhealth
:let g:loaded_perl_provider = 0

" """"""""""""""""""""""""""""""
"
" Visual linewise up and down by default (and use gj gk to go quicker)
noremap j gj
noremap k gk

" Center the screen
nnoremap <space> zz

" Profile Vim by running this command once to start it and again to stop it.
function! s:profile(bang)
  if a:bang
    profile pause
    noautocmd qall
  else
    profile start /tmp/profile.log
    profile func *
    profile file *
  endif
endfunction

command! -bang Profile call s:profile(<bang>0)

" show split window always at the very bottom of all other windows
autocmd FileType qf wincmd J

" change working directory to the location of the current file
command! CD :cd %:p:h
